name: Deploy Customer Loyalty Agent

on:
  # Trigger after infrastructure deployment completes successfully
  workflow_run:
    workflows: ["Deploy Complete Infrastructure"]
    types: [completed]
    branches: [main]
  
  # Manual trigger and code changes (but infrastructure must exist)
  push:
    branches: [ main ]
    paths:
      - 'src/app/agents/loyaltyAgent_initializer.py'
      - 'src/prompts/LoyaltyAgentPrompt.txt'
      - 'src/app/tools/discountLogic.py'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment without infrastructure dependency check'
        required: false
        default: false
        type: boolean

jobs:
  deploy-customer-loyalty-agent:
    runs-on: ubuntu-latest
    # Only run if infrastructure deployment succeeded OR manual force deployment
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' || github.event.inputs.force_deploy == 'true' }}
    
    steps:
    - name: Check Infrastructure Dependency
      run: |
        echo "🔍 Checking deployment trigger..."
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          echo "✅ Triggered by infrastructure deployment completion"
          echo "Infrastructure workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
          if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
            echo "❌ Infrastructure deployment failed - cannot deploy agent"
            exit 1
          fi
        elif [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
          echo "⚠️  Force deployment enabled - skipping infrastructure check"
        else
          echo "📝 Manual trigger or code change - assuming infrastructure exists"
          echo "💡 If deployment fails, run infrastructure deployment first"
        fi
    
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Install Python dependencies
      run: |
        cd src
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create environment file for agent deployment
      run: |
        cd src
        cat > .env << 'EOF'
        # Azure AI Agent Service credentials
        AZURE_AI_AGENT_ENDPOINT="${{ secrets.AZURE_AI_AGENT_ENDPOINT }}"
        AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME="${{ secrets.AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME }}"
        AZURE_AI_AGENT_API_VERSION="${{ secrets.AZURE_AI_AGENT_API_VERSION }}"
        
        # Cosmos DB for discount logic tool
        COSMOS_ENDPOINT="${{ secrets.COSMOS_ENDPOINT }}"
        COSMOS_KEY="${{ secrets.COSMOS_KEY }}"
        DATABASE_NAME="${{ secrets.DATABASE_NAME }}"
        CONTAINER_NAME="${{ secrets.CONTAINER_NAME }}"
        
        # Application Insights for telemetry
        APPLICATIONINSIGHTS_CONNECTION_STRING="${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}"
        EOF
        
    - name: Deploy Customer Loyalty Agent
      run: |
        cd src
        echo "🚀 Deploying Customer Loyalty Agent..."
        python app/agents/customerLoyaltyAgent_initializer.py
        
    - name: Verify deployment
      run: |
        echo "✅ Customer Loyalty Agent deployment completed successfully!"
        echo "📋 Files that triggered this deployment:"
        echo "   - customerLoyaltyAgent_initializer.py"
        echo "   - CustomerLoyaltyAgentPrompt.txt"  
        echo "   - discountLogic.py (tool)"
        echo "📊 Commit: ${{ github.sha }}"
        echo "🔗 Run: ${{ github.run_id }}"